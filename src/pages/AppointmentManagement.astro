---
// Import Layout
import Layout from '../layouts/Layout.astro';
---

<Layout title="Gestión de Citas">
  <main class="flex min-h-screen bg-gray-100">
    <!-- Sidebar -->
    <aside id="sidebar" class="bg-blue-500 text-white w-1/5 flex flex-col items-center py-6 space-y-8">
      <!-- Sidebar Content Will Be Dynamically Rendered -->
    </aside>

    <!-- Main Content -->
    <section class="flex-grow p-8 bg-white" id="mainContent">
      <!-- Header -->
      <header class="flex justify-between items-center mb-6">
        <div>
          <h2 id="dashboard-title" class="text-2xl font-semibold">Gestión de Citas</h2>
          <p id="role-description" class="text-gray-600">Cargando...</p>
        </div>
      </header>

      <!-- Filters Section -->
      <div id="filtersSection" class="space-y-4 bg-gray-50 p-6 rounded-lg shadow-lg mb-8 hidden">
        <h3 class="text-xl font-bold text-gray-800">Filtros</h3>
        <div class="grid grid-cols-4 gap-4">
          <!-- Filter inputs -->
        </div>
        <button
          id="apply-filters"
          class="mt-4 py-2 px-4 bg-blue-500 text-white font-medium rounded-md shadow-md hover:bg-blue-600"
        >
          Aplicar Filtros
        </button>
      </div>

      <!-- Appointment Table -->
      <div class="bg-gray-50 p-6 rounded-lg shadow-lg">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Citas</h3>
        <table class="min-w-full table-auto border-collapse border border-gray-300">
          <thead class="bg-blue-500 text-white">
            <tr>
              <th class="border border-gray-300 px-4 py-2">ID-Cita</th>
              <th class="border border-gray-300 px-4 py-2">ID-Paciente</th>
              <th class="border border-gray-300 px-4 py-2">Doctor</th>
              <th class="border border-gray-300 px-4 py-2">Consultation-Room</th>
              <th class="border border-gray-300 px-4 py-2">Nombre del Paciente</th>
              <th class="border border-gray-300 px-4 py-2">Estado del Paciente</th>
              <th class="border border-gray-300 px-4 py-2">Departamento</th>
              <th class="border border-gray-300 px-4 py-2">Fecha y Hora</th>
              <th class="border border-gray-300 px-4 py-2">Acciones</th>
            </tr>
          </thead>
          <tbody id="appointment-list" class="text-gray-700">
            <!-- Rows will be dynamically populated -->
          </tbody>
        </table>
      </div>
    </section>
  </main>

  <!-- Edit Modal -->
  <div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/2">
      <h3 class="text-xl font-bold mb-4">Editar Cita</h3>
      <form id="editForm" class="space-y-4">
        <input type="hidden" id="editAppointmentId" />
        <div>
          <label for="editDate" class="block text-sm font-medium text-gray-700">Fecha y Hora</label>
          <input type="datetime-local" id="editDate" class="w-full p-2 border rounded-md" required />
        </div>
        <div class="flex justify-end space-x-4">
          <button type="button" id="cancelEdit" class="py-2 px-4 bg-gray-300 text-gray-800 rounded-md">Cancelar</button>
          <button type="submit" class="py-2 px-4 bg-blue-500 text-white rounded-md">Guardar</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
      <h3 class="text-xl font-bold mb-4">Eliminar Cita</h3>
      <p class="mb-6">¿Está seguro de que desea eliminar esta cita?</p>
      <div class="flex justify-end space-x-4">
        <button id="cancelDelete" class="py-2 px-4 bg-gray-300 text-gray-800 rounded-md">Cancelar</button>
        <button id="confirmDelete" class="py-2 px-4 bg-red-500 text-white rounded-md">Eliminar</button>
      </div>
    </div>
  </div>

  <script>
    const API_URL = 'http://localhost:8080';
    const appointmentList = document.getElementById('appointment-list');

    async function fetchAppointments() {
      try {
        const response = await fetch(`${API_URL}/appointments`);
        if (!response.ok) throw new Error('Failed to fetch appointments');
        const appointments = await response.json();

        renderAppointments(appointments);
      } catch (error) {
        console.error('Error fetching appointments:', error);
        alert('Hubo un error al cargar las citas.');
      }
    }

    function renderAppointments(appointments) {
      appointmentList.innerHTML = '';
      if (appointments.length === 0) {
        appointmentList.innerHTML = `<tr><td colspan="9" class="text-center text-gray-500 py-4">No hay citas disponibles.</td></tr>`;
        return;
      }

      appointments.forEach((appointment) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${appointment.id}</td>
          <td>${appointment.patient.id}</td>
          <td>${appointment.doctor.name} ${appointment.doctor.lastNames}</td>
          <td>${appointment.room.name}</td>
          <td>${appointment.patient.name} ${appointment.patient.lastNames}</td>
          <td>${appointment.patient.state.name}</td>
          <td>${appointment.reason.name}</td>
          <td>${new Date(appointment.date).toLocaleString()}</td>
          <td>
            <button class="edit-button text-blue-500 hover:underline" data-id="${appointment.id}">Editar</button>
            <button class="delete-button text-red-500 hover:underline" data-id="${appointment.id}">Eliminar</button>
          </td>
        `;
        appointmentList.appendChild(row);
      });

      document.querySelectorAll('.edit-button').forEach((button) => {
        button.addEventListener('click', openEditModal);
      });

      document.querySelectorAll('.delete-button').forEach((button) => {
        button.addEventListener('click', openDeleteModal);
      });
    }

    function openEditModal(event) {
      const appointmentId = event.target.dataset.id;
      // Mock data for demonstration
      const appointment = {
        id: appointmentId,
        doctor: { name: 'Dr. John', lastNames: 'Doe' },
        date: '2024-12-01T09:00:00',
      };

      document.getElementById('editAppointmentId').value = appointment.id;
      document.getElementById('editDoctor').value = `${appointment.doctor.name} ${appointment.doctor.lastNames}`;
      document.getElementById('editDate').value = new Date(appointment.date).toISOString().slice(0, 16);
      document.getElementById('editModal').classList.remove('hidden');
    }

    document.getElementById('editForm').addEventListener('submit', async (event) => {
      event.preventDefault();
      const appointmentId = document.getElementById('editAppointmentId').value;
      const updatedDoctor = document.getElementById('editDoctor').value;
      const updatedDate = document.getElementById('editDate').value;

      try {
        const response = await fetch(`${API_URL}/appointment/${appointmentId}/date`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ date: updatedDate }),
        });
        if (!response.ok) throw new Error('Failed to update appointment');
        fetchAppointments();
        document.getElementById('editModal').classList.add('hidden');
        
      } catch (error) {
        console.error('Error updating appointment:', error);
        alert('Hubo un error al actualizar la cita.');
      }
    });

    document.getElementById('cancelEdit').addEventListener('click', () => {
      document.getElementById('editModal').classList.add('hidden');
    });

    function openDeleteModal(event) {
      const appointmentId = event.target.dataset.id;
      document.getElementById('confirmDelete').dataset.id = appointmentId;
      document.getElementById('deleteModal').classList.remove('hidden');
    }

    document.getElementById('confirmDelete').addEventListener('click', async (event) => {
      const target = event.target as HTMLElement;
      const appointmentId = target.dataset.id;
      try {
        const response = await fetch(`${API_URL}/appointment/${appointmentId}`, { method: 'DELETE' });
        if (!response.ok) throw new Error('Failed to delete appointment');
        fetchAppointments();
        document.getElementById('deleteModal').classList.add('hidden');
      } catch (error) {
        console.error('Error deleting appointment:', error.message);
        alert('Hubo un error al eliminar la cita.');
      }
    });

    document.getElementById('cancelDelete').addEventListener('click', () => {
      document.getElementById('deleteModal').classList.add('hidden');
    });

    fetchAppointments();
  </script>
</Layout>
